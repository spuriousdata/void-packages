# Template file for 'rust'
pkgname=rust
version=1.20.0
revision=1
# NB. if you push any(!) new version, don't forget to put a build
# output of musl to https://repo.voidlinux.eu/distfiles/
wrksrc="rustc-${version}-src"
lib32disabled=yes
patch_args="-Np1"
build_style=configure
make_build_args="dist VERBOSE=1"
only_for_archs="i686 x86_64 x86_64-musl"
hostmakedepends="cmake curl pkg-config python"
makedepends="libffi-devel llvm ncurses-devel zlib-devel"
short_desc="Safe, concurrent, practical systems language"
maintainer="Leah Neukirchen <leah@vuxu.org>"
homepage="http://www.rust-lang.org/"
license="MIT, Apache-2.0"
distfiles="https://static.rust-lang.org/dist/rustc-${version}-src.tar.gz"
checksum=2aa4875ff4472c6e35262bbb9052cb2623da3dae6084a858cc59d36f33f18214

case "$XBPS_MACHINE" in
x86_64-musl)
	hostmakedepends+=" libcurl libgit2"
	distfiles+="
	 https://repo.voidlinux.eu/distfiles/rustc-1.19.0-x86_64-unknown-linux-musl.tar.gz
	 https://repo.voidlinux.eu/distfiles/rust-std-1.19.0-x86_64-unknown-linux-musl.tar.gz
	 https://repo.voidlinux.eu/distfiles/cargo-0.18.0-x86_64-unknown-linux-musl.tar.gz"
	checksum+="
	 28aa0f1335fad547072602520a773d29000785aceaed9ec71b1b207256b31d1f
	 4e9e92c56708cccc5f567058b21bc62cb0a40bf2ed38466f0dc28eac64aae7d2
	 28f2ee839f14f8b3edf3f4e4cc8600ac99ea50905ee8fb91116bba676728c2e9"
	;;
x86_64)
	# extract from src/stage0.txt
	distfiles+="
	 https://static.rust-lang.org/dist/2017-07-20/rustc-1.19.0-x86_64-unknown-linux-gnu.tar.gz
	 https://static.rust-lang.org/dist/2017-07-20/rust-std-1.19.0-x86_64-unknown-linux-gnu.tar.gz
	 https://s3.amazonaws.com/rust-lang-ci/cargo-builds/6b05583d71f982bcad049b9fa094c637c062e751/cargo-nightly-x86_64-unknown-linux-gnu.tar.gz"
	checksum+="
	 4c8df3088d17c8e06bf58d453d39bd521487defcefc8193203b80f0fb797d6fe
	 5905803e8a127f656bf253978692f0d6cf6c9206c527e4d6d7e981980618d1b6
	 d9e69d2b87dc0cf7fafe0e0eb64f82fe3414ef14fcb27f5eeff34df860e459d9"
	;;
i686)
	# extract from src/stage0.txt
	distfiles+="
	 https://static.rust-lang.org/dist/2017-07-20/rustc-1.19.0-i686-unknown-linux-gnu.tar.gz
	 https://static.rust-lang.org/dist/2017-07-20/rust-std-1.19.0-i686-unknown-linux-gnu.tar.gz
	 https://s3.amazonaws.com/rust-lang-ci/cargo-builds/6b05583d71f982bcad049b9fa094c637c062e751/cargo-nightly-i686-unknown-linux-gnu.tar.gz"
	checksum+="
	 33377c93d8afc08f3f211adcfb88b0e9bb0fba5af2ee52016293921c14aa355c
	 7cdc76ef163050e9bc352d0ffc48d7d40ae66be0eb1fa1295e0635665c6e32ef
	 863a4f92bbeec76257403fd571a90b90bd759ec8bcaddb7517fb89d40959e9e5"
	;;
esac

post_extract() {
	rm -rf src/llvm

	mkdir -p stage0
	cp -flr ../rustc-*/rustc/* stage0
	cp -flr ../rust-std-*/rust-std-*/* stage0
	cp -flr ../cargo-*/cargo/* stage0

	# XXX: Cheat Rust build system so we can build rustc using different
	# version of (prebuilt) stable rustc than preconfigured. It's hack-ish,
	# but since we're basically rebuilding rustc with the same version,
	# it's actually safe.
	# Note: --enable-local-rebuild from #33787 didn't work, don't know why.
	export LD_LIBRARY_PATH="$wrksrc/stage0/lib"
	rustc_ver="$($wrksrc/stage0/bin/rustc --version | cut -f2 -d ' ')"
	rustc_key="$(printf "$rustc_ver" | md5sum | cut -c1-8)"
	sed -Ei \
		-e "s/^(rustc):.*/\1: $rustc_ver-1970-01-01/" \
		-e "s/^(rustc_key):.*/\1: $rustc_key/" \
		src/stage0.txt

	# Generate config for bootstrap.py to use our prebuilt rustc and cargo
	# for bootstrapping instead of downloading snapshot from internet.
	cat > config.toml <<EOF
[build]
cargo = "$wrksrc/stage0/bin/cargo"
rustc = "$wrksrc/stage0/bin/rustc"
EOF

	sed -i /LD_LIBRARY_PATH/d src/bootstrap/bootstrap.py
}

pre_build() {
	export CARGO_HOME="$wrksrc/.cargo"
	export SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt
	export LD_LIBRARY_PATH="$wrksrc/stage0/lib"
	export PATH="$wrksrc/stage0/bin:$PATH"
	export MUSL_ROOT=/usr
	export RUST_BACKTRACE=1
}

do_configure() {
	local _triplet
	case $XBPS_TARGET_MACHINE in
		i686) _triplet=i686-unknown-linux-gnu;;
		x86_64) _triplet=x86_64-unknown-linux-gnu;;
		x86_64-musl) _triplet=x86_64-unknown-linux-musl;;
		*) _triplet=$XBPS_TARGET_MACHINE;;
	esac
	export LD_LIBRARY_PATH="$wrksrc/stage0/lib"
	configure_args="
		--prefix=/usr
		--host=${_triplet}
		--build=${_triplet}
		--release-channel=stable
		--disable-rpath
		--enable-ccache
		--llvm-root=/usr
		--enable-local-rust
		--local-rust-root=$wrksrc/stage0
	"
	case "$XBPS_TARGET_MACHINE" in
	*-musl)
		configure_args+="--musl-root=/usr --disable-jemalloc"
		;;
	esac
	./configure $configure_args

}
do_install() {
	vmkdir usr
	tar xf build/dist/rustc-*-*-*.tar.gz -C "$DESTDIR/usr" --strip-components=2 --exclude=manifest.in
	tar xf build/dist/rust-std-*-*-*.tar.gz -C "$DESTDIR/usr/lib" --strip-components=3 --exclude=manifest.in
	tar xf build/dist/rust-docs-*-*-*.tar.gz -C "$DESTDIR/usr" --strip-components=2 --exclude=manifest.in

	vlicense COPYRIGHT
	vlicense LICENSE-APACHE
	vlicense LICENSE-MIT

	cd ${DESTDIR}/usr/lib
	ln -sf rustlib/*/lib/*.so .   # symlinks instead of copies
}

rust-doc_package() {
	short_desc+=" - documentation"
	noarch=yes
	pkg_install() {
		vmove usr/share/doc
	}
}
